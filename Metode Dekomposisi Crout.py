# -*- coding: utf-8 -*-
"""Metode Dekomposisi Crout.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Bhi93qcbQ2OEQsG1w4ZycIOyDcEaMvN

Namira Nurfaliani 21120122140135 Metode Numerik - C

Metode Dekomposisi Crout
"""

import numpy as np

def lu_crout(A):

    n = len(A)
    L = np.zeros((n, n))
    U = np.zeros((n, n))

    for j in range(n):
        L[j, j] = 1
        for i in range(j, n):
            U[j, i] = A[j, i] - np.dot(L[j, :j], U[:j, i])
        for i in range(j+1, n):
            L[i, j] = (A[i, j] - np.dot(L[i, :j], U[:j, j])) / U[j, j]

    return L, U

def solve_linear_equation_crout(A, b):

    L, U = lu_crout(A)


    n = len(A)
    y = np.zeros(n)
    for i in range(n):
        y[i] = b[i] - np.dot(L[i, :i], y[:i])


    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (y[i] - np.dot(U[i, i+1:], x[i+1:])) / U[i, i]

    return x

A = np.array([[2, -1, 1], [-3, 2, -2], [-2, 1, 1]])
b = np.array([8, -11, -3])
x = solve_linear_equation_crout(A, b)
print("Solution:", x)


verification = np.allclose(np.dot(A, x), b)
if verification:
    print("Solution verified successfully!")
else:
    print("Solution verification failed!")